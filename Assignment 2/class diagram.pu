@startuml

skinparam classAttributeIconSize 0

class DirectoryService {
  - activeBrokers: List<BrokerInfo>
  - lastHeartbeat: Map<String, Long>
  + main(args: String[])
  - handleClient(clientSocket: Socket)
  - registerBroker(brokerInfo: String)
  - getBrokerList(): String
  - removeInactiveBrokers()
}

class BrokerInfo {
  - ip: String
  - port: int
}

class Broker {
  - port: int
  - topics: Map<String, Topic>
  - otherBrokers: List<String>
  - directoryServiceInfo: String
  + main(args: String[])
  - handleClient(clientSocket: Socket)
  - handlePublisher(input: String, output: PrintWriter)
  - handleSubscriber(input: String, output: PrintWriter)
  - synchronizeWithOtherBrokers()
  - sendHeartbeat()
}

class Topic {
  - id: String
  - name: String
  - publisher: String
  - subscribers: Set<String>
  + addSubscriber(subscriber: String)
  + removeSubscriber(subscriber: String)
}

class Publisher {
  - username: String
  - brokerAddress: String
  - brokerPort: int
  + main(args: String[])
  - connectToBroker()
  - createTopic(topicName: String)
  - deleteTopic(topicId: String)
  - publishMessage(topicId: String, message: String)
  - getBrokerInfo(directoryServiceInfo: String): List<String>
}

class Subscriber {
  - username: String
  - brokerAddress: String
  - brokerPort: int
  + main(args: String[])
  - connectToBroker()
  - listTopics()
  - subscribeTopic(topicId: String)
  - unsubscribeTopic(topicId: String)
  - showCurrentSubscriptions()
  - getBrokerInfo(directoryServiceInfo: String): List<String>
}

DirectoryService "1" -- "*" BrokerInfo : manages
Broker "1" -- "*" Topic : manages
Publisher "*" -- "1" Broker : connects to
Subscriber "*" -- "1" Broker : connects to
DirectoryService "1" -- "*" Broker : monitors

@enduml

